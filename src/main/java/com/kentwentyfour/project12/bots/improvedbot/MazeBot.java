package com.kentwentyfour.project12.bots.improvedbot;


import com.kentwentyfour.project12.bots.BasicBot;
import com.kentwentyfour.project12.bots.BotPlayer;
import com.kentwentyfour.project12.bots.MultipleTurnBot;
import com.kentwentyfour.project12.bots.improvedbot.resources.AStarAlgorithm;
import com.kentwentyfour.project12.bots.improvedbot.resources.SecondAlgorithm;
import com.kentwentyfour.project12.bots.improvedbot.resources.Waypoint;
import com.kentwentyfour.project12.gameobjects.*;
import com.kentwentyfour.project12.gameobjects.movableobjects.GolfBall;
import com.kentwentyfour.project12.physicsengine.CoordinatesPath;
import com.kentwentyfour.project12.physicsengine.PhysicsEngine;
import com.kentwentyfour.project12.ReferenceStore;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
/**
 * The MazeBot class implements the BotPlayer and MultipleTurnBot interfaces to control a golf ball's path in a maze-like environment.
 * It uses A* algorithm for generating waypoint paths and delegates the main path calculation to BasicBot.
 */
public class MazeBot implements BotPlayer, MultipleTurnBot {
    private MapManager mapManager;
    private PhysicsEngine physicsEngine;
    private ReferenceStore referenceStore = ReferenceStore.getInstance();
    private double  targetX;
    private double targetY;
    private GolfBall ball;
    private List<Waypoint> aStarPath;
    private int count = 0;

    private long computationTime;
    private int numberOfTurns = 1;
    /**
     * Constructs a new instance of MazeBot.
     * Initializes the physics engine, map manager, and retrieves the golf ball from the reference store.
     */
    public MazeBot() {
        this.physicsEngine = referenceStore.getPhysicsEngine();
        this.mapManager = referenceStore.getMapManager();
        ArrayList<GolfBall> golfBallArrayList = referenceStore.getGolfballList();
        this.ball = golfBallArrayList.getFirst() ;
    }
    /**
     * Calculates the path of the golf ball towards the specified target using the BasicBot's path calculation method.
     *
     * @param golfBall The golf ball object representing the current position and state.
     * @param targetX  The X coordinate of the target.
     * @param targetY  The Y coordinate of the target.
     * @return A CoordinatesPath object representing the calculated path of the golf ball.
     */
    @Override
    public CoordinatesPath calculatePath(GolfBall golfBall,double targetX,double targetY) {
        long startTime = System.nanoTime();
        CoordinatesPath path = null;
        BasicBot usedBot= new BasicBot();
        path = usedBot.calculatePath(golfBall,targetX,targetY);
        long endTime = System.nanoTime();
        computationTime = endTime - startTime;
        return path;
    }
    /**
     * Generates waypoint path using the SecondAlgorithm to reach the specified target.
     * Waypoints are used for guiding the golf ball towards the target more efficiently.
     *
     * @param targetX The X coordinate of the target.
     * @param targetY The Y coordinate of the target.
     */
    public void generateWaypointPath(double targetX, double targetY){
        // decrease range for more midpoints 1=max 100=min
        this.targetX = targetX;
        this.targetY = targetY;
        SecondAlgorithm astarAlgorithm = new SecondAlgorithm();
        this.aStarPath = astarAlgorithm.generateWaypoints(ball.getX(), ball.getY(), this.targetX, this.targetY);
        if(this.aStarPath == null || this.aStarPath.isEmpty()){
            System.err.println("No waypoints created");
        }
        for (Waypoint waypoint : aStarPath) {
            System.out.println("Waypoint: " + waypoint);
        }
        mapManager.drawAStarPath(aStarPath);
    }
    /**
     * Retrieves the current waypoint path generated by the generateWaypointPath method.
     *
     * @return A list of Waypoint objects representing the current waypoint path.
     */
    public List<Waypoint> getCurrentWaypointPath(){
        return this.aStarPath;
    }

    /**
     * Retrieves the computation time taken for the last path calculation.
     *
     * @return The computation time in nanoseconds.
     */
    @Override
    public long getComputationTime() {
        return computationTime;
    }
    /**
     * Retrieves the name of the bot.
     *
     * @return The name of the bot.
     */
    @Override
    public String getName() {
        return "BasicBot";
    }

    /**
     * Retrieves the number of turns or iterations this bot will play.
     *
     * @return The number of turns or iterations.
     */
    @Override
    public int getNumberOfTurns() {
        return numberOfTurns;
    }
}